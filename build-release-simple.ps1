# PowerShell script to build a release signed APK for MQFTPServer
# Author: Generated by GitHub Copilot
# Date: September 9, 2025

param(
    [Parameter(Mandatory=$false)]
    [string]$KeystorePath = "",
    
    [Parameter(Mandatory=$false)]
    [string]$KeyAlias = "",
    
    [Parameter(Mandatory=$false)]
    [switch]$Clean = $false,
    
    [Parameter(Mandatory=$false)]
    [switch]$Help = $false
)

function Show-Help {
    Write-Host @"
MQFTPServer Release APK Build Script
====================================

Usage: .\build-release-simple.ps1 [options]

Options:
  -KeystorePath <path>     Path to your keystore file (.jks or .keystore)
  -KeyAlias <alias>        Key alias in the keystore
  -Clean                   Clean build (removes build cache)
  -Help                    Show this help message

Automatic Versioning:
  - Version Name: YYYY.MM.DD (e.g., 2025.9.10)
  - Version Code: Git commit count
  - APK filename includes version and build number

Examples:
  .\build-release-simple.ps1                                           # Auto-detects release keystore
  .\build-release-simple.ps1 -KeystorePath "C:\keys\release.jks" -KeyAlias "mykey"
  .\build-release-simple.ps1 -Clean

Note: 
  - Script will search for release keystores in common locations:
    * %USERPROFILE%\.android\release.keystore
    * %USERPROFILE%\Documents\release.jks
    * .\keystore\release.jks
    * .\release.jks
  - Automatic version generation based on date and git commits
  - Debug keystore is only offered as fallback with warnings
  - Passwords will be prompted securely during execution
  - You can also set them via environment variables:
    - MQFTP_KEYSTORE_PATH
    - MQFTP_KEY_ALIAS
"@
}

function Get-VersionInfo {
    Write-Host "Generating version information..." -ForegroundColor Yellow
    
    # Get current date
    $currentDate = Get-Date
    $major = $currentDate.Year
    $minor = $currentDate.Month
    $patch = $currentDate.Day
    
    # Get commit count for build number
    try {
        $commitCount = (git rev-list --count HEAD 2>$null) -replace '\s', ''
        if (-not $commitCount -or $commitCount -eq "") {
            Write-Warning "Could not get git commit count, using default build number 1"
            $commitCount = "1"
        }
        $build = [int]$commitCount
    }
    catch {
        Write-Warning "Git not available or not a git repository, using default build number 1"
        $build = 1
    }
    
    $versionName = "$major.$minor.$patch"
    $versionCode = $build
    
    Write-Host "Version Name: $versionName" -ForegroundColor Green
    Write-Host "Version Code: $versionCode" -ForegroundColor Green
    Write-Host "Build Number: $build (from $commitCount commits)" -ForegroundColor Green
    
    return @{
        Major = $major
        Minor = $minor
        Patch = $patch
        Build = $build
        VersionName = $versionName
        VersionCode = $versionCode
    }
}

function Update-AppVersion {
    param([hashtable]$versionInfo)
    
    Write-Host "Updating app version in build.gradle.kts..." -ForegroundColor Yellow
    
    $buildGradlePath = "app\build.gradle.kts"
    $content = Get-Content $buildGradlePath -Raw
    
    # Update versionCode
    $content = $content -replace 'versionCode\s*=\s*\d+', "versionCode = $($versionInfo.VersionCode)"
    
    # Update versionName
    $content = $content -replace 'versionName\s*=\s*"[^"]*"', "versionName = `"$($versionInfo.VersionName)`""
    
    Set-Content -Path $buildGradlePath -Value $content -NoNewline
    Write-Host "App version updated to $($versionInfo.VersionName) (code: $($versionInfo.VersionCode))" -ForegroundColor Green
}

function Test-Prerequisites {
    Write-Host "Checking prerequisites..." -ForegroundColor Yellow
    
    # Check if we're in the right directory
    if (-not (Test-Path "build.gradle.kts")) {
        Write-Error "build.gradle.kts not found. Please run this script from the project root directory."
        exit 1
    }
    
    # Check if gradlew exists
    if (-not (Test-Path "gradlew.bat")) {
        Write-Error "gradlew.bat not found. This script requires Gradle Wrapper."
        exit 1
    }
    
    # Check Java installation
    try {
        $javaVersion = java -version 2>&1 | Select-String "version" | Select-Object -First 1
        Write-Host "Java found: $javaVersion" -ForegroundColor Green
    }
    catch {
        Write-Error "Java not found in PATH. Please install Java JDK 17 or later."
        exit 1
    }
    
    Write-Host "Prerequisites check passed!" -ForegroundColor Green
}

function Get-SigningInfo {
    # Get keystore path
    $keystorePath = $KeystorePath
    if (-not $keystorePath) { 
        $keystorePath = $env:MQFTP_KEYSTORE_PATH 
    }
    if (-not $keystorePath) {
        # First try to find a release keystore in common locations
        $releaseKeystorePaths = @(
            "$env:USERPROFILE\.android\release.keystore",
            "$env:USERPROFILE\Documents\release.keystore",
            "$env:USERPROFILE\Documents\release.jks",
            ".\keystore\release.jks",
            ".\release.keystore",
            ".\release.jks"
        )
        
        foreach ($path in $releaseKeystorePaths) {
            if (Test-Path $path) {
                $useRelease = Read-Host "Found release keystore at ($path). Use this? (y/n) [y]"
                if ($useRelease -eq "" -or $useRelease -eq "y" -or $useRelease -eq "Y") {
                    $keystorePath = $path
                    break
                }
            }
        }
        
        # If no release keystore found, offer debug keystore with warning
        if (-not $keystorePath) {
            $debugKeystore = "$env:USERPROFILE\.android\debug.keystore"
            if (Test-Path $debugKeystore) {
                Write-Host "WARNING: No release keystore found." -ForegroundColor Red
                Write-Host "The debug keystore is NOT suitable for production releases!" -ForegroundColor Red
                $useDebug = Read-Host "Use debug keystore for testing only? ($debugKeystore) (y/n) [n]"
                if ($useDebug -eq "y" -or $useDebug -eq "Y") {
                    $keystorePath = $debugKeystore
                }
            }
        }
        
        if (-not $keystorePath) {
            $keystorePath = Read-Host "Enter keystore path (.jks or .keystore file)"
        }
    }
    
    if (-not (Test-Path $keystorePath)) {
        Write-Error "Keystore file not found: $keystorePath"
        exit 1
    }
    
    # Get key alias
    $keyAlias = $KeyAlias
    if (-not $keyAlias) { 
        $keyAlias = $env:MQFTP_KEY_ALIAS 
    }
    if (-not $keyAlias) {
        # Default alias suggestions based on keystore type
        if ($keystorePath -like "*debug.keystore") {
            $useDefaultAlias = Read-Host "Use default debug key alias 'androiddebugkey'? (y/n) [y]"
            if ($useDefaultAlias -eq "" -or $useDefaultAlias -eq "y" -or $useDefaultAlias -eq "Y") {
                $keyAlias = "androiddebugkey"
            }
        } elseif ($keystorePath -like "*release*") {
            $useDefaultAlias = Read-Host "Use default release key alias 'releasekey'? (y/n) [y]"
            if ($useDefaultAlias -eq "" -or $useDefaultAlias -eq "y" -or $useDefaultAlias -eq "Y") {
                $keyAlias = "releasekey"
            } else {
                Write-Host "Common release key aliases: release, myapp, appkey, releasekey" -ForegroundColor Yellow
            }
        }
        
        if (-not $keyAlias) {
            $keyAlias = Read-Host "Enter key alias"
        }
    }
    
    # Get passwords securely
    if ($keystorePath -like "*debug.keystore" -and $keyAlias -eq "androiddebugkey") {
        Write-Host "Using Android Studio debug keystore with default password" -ForegroundColor Yellow
        Write-Host "WARNING: This APK is signed with debug certificate - NOT for production!" -ForegroundColor Red
        # Android Studio debug keystore uses 'android' as both keystore and key password
        $keystorePassword = ConvertTo-SecureString "android" -AsPlainText -Force
        $keyPassword = ConvertTo-SecureString "android" -AsPlainText -Force
    } else {
        $keystorePassword = Read-Host "Enter keystore password" -AsSecureString
        $keyPassword = Read-Host "Enter key password" -AsSecureString
    }
    
    return @{
        KeystorePath = $keystorePath
        KeyAlias = $keyAlias
        KeystorePassword = $keystorePassword
        KeyPassword = $keyPassword
    }
}

function Build-SignedAPK {
    param(
        [hashtable]$signingInfo,
        [hashtable]$versionInfo,
        [bool]$cleanBuild
    )
    
    Write-Host "Starting APK build process..." -ForegroundColor Yellow
    
    # Convert SecureString to plain text for Gradle
    $keystorePasswordPlain = [Runtime.InteropServices.Marshal]::PtrToStringAuto(
        [Runtime.InteropServices.Marshal]::SecureStringToBSTR($signingInfo.KeystorePassword)
    )
    $keyPasswordPlain = [Runtime.InteropServices.Marshal]::PtrToStringAuto(
        [Runtime.InteropServices.Marshal]::SecureStringToBSTR($signingInfo.KeyPassword)
    )
    
    try {
        if ($cleanBuild) {
            Write-Host "Performing clean build..." -ForegroundColor Yellow
            & .\gradlew.bat clean
            if ($LASTEXITCODE -ne 0) {
                Write-Error "Clean failed"
                exit 1
            }
        }
        
        Write-Host "Building release APK with signing..." -ForegroundColor Yellow
        
        # Build with signing parameters passed as system properties
        & .\gradlew.bat assembleRelease `
            "-PRELEASE_STORE_FILE=$($signingInfo.KeystorePath)" `
            "-PRELEASE_STORE_PASSWORD=$keystorePasswordPlain" `
            "-PRELEASE_KEY_ALIAS=$($signingInfo.KeyAlias)" `
            "-PRELEASE_KEY_PASSWORD=$keyPasswordPlain"
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "Build successful!" -ForegroundColor Green
            
            # Find the generated APK
            $apkPath = Get-ChildItem -Path "app\build\outputs\apk\release" -Filter "*.apk" | Select-Object -First 1
            
            if ($apkPath) {
                $fullPath = $apkPath.FullName
                $size = [math]::Round($apkPath.Length / 1MB, 2)
                Write-Host @"

APK Generated Successfully!
===========================
Location: $fullPath
Size: $size MB

You can install this APK on your device or upload it to app stores.
"@ -ForegroundColor Green
                
                # Copy to project root for convenience with version info
                $timestamp = Get-Date -Format 'yyyyMMdd-HHmm'
                $projectApkName = "MQFTPServer-v$($versionInfo.VersionName)-build$($versionInfo.Build)-$timestamp.apk"
                Copy-Item $fullPath $projectApkName
                Write-Host "APK also copied to: $PWD\$projectApkName" -ForegroundColor Green
            }
            else {
                Write-Warning "APK file not found in expected location"
            }
        }
        else {
            Write-Error "Build failed with exit code $LASTEXITCODE"
            exit 1
        }
    }
    finally {
        # Clear sensitive data from memory
        $keystorePasswordPlain = $null
        $keyPasswordPlain = $null
    }
}

# Main script execution
try {
    if ($Help) {
        Show-Help
        exit 0
    }
    
    Write-Host "MQFTPServer Release APK Builder" -ForegroundColor Cyan
    Write-Host "================================" -ForegroundColor Cyan
    
    Test-Prerequisites
    
    # Generate version information based on current date and git commits
    $versionInfo = Get-VersionInfo
    
    $signingInfo = Get-SigningInfo
    
    # Check if we need to update build.gradle.kts for signing
    $buildGradlePath = "app\build.gradle.kts"
    $buildContent = Get-Content $buildGradlePath -Raw
    
    # Backup original file
    Copy-Item $buildGradlePath "$buildGradlePath.backup"
    
    # Update version information first
    Update-AppVersion $versionInfo
    
    # Re-read content after version update
    $buildContent = Get-Content $buildGradlePath -Raw
    
    if (-not ($buildContent -match "signingConfigs")) {
        Write-Host "Adding signing configuration to build.gradle.kts..." -ForegroundColor Yellow
        
        # Add signing configuration
        $signingConfig = @'

  signingConfigs {
    create("release") {
      if (project.hasProperty("RELEASE_STORE_FILE")) {
        storeFile = file(project.property("RELEASE_STORE_FILE") as String)
        storePassword = project.property("RELEASE_STORE_PASSWORD") as String
        keyAlias = project.property("RELEASE_KEY_ALIAS") as String
        keyPassword = project.property("RELEASE_KEY_PASSWORD") as String
      }
    }
  }
'@
        
        # Insert signing config before buildTypes
        $replacement1 = "`$1$signingConfig`r`n`r`n`$1`$2"
        $buildContent = $buildContent -replace '(\s+)(buildTypes\s*\{)', $replacement1
        
        # Update release build type to use signing config
        $replacement2 = '$1      signingConfig = signingConfigs.getByName("release")' + "`r`n`r`n" + '      $2'
        $buildContent = $buildContent -replace '(release\s*\{[^}]*)(packaging\s*\{)', $replacement2
        
        Set-Content -Path $buildGradlePath -Value $buildContent -NoNewline
        Write-Host "Signing configuration added to build.gradle.kts" -ForegroundColor Green
    }
    
    Build-SignedAPK $signingInfo $versionInfo $Clean
    
    Write-Host "`nBuild process completed successfully!" -ForegroundColor Green
    Write-Host "You can now install the APK on your device or publish it to app stores." -ForegroundColor Green
}
catch {
    Write-Error "An error occurred: $($_.Exception.Message)"
    exit 1
}
finally {
    # Restore original build.gradle.kts if backup exists
    if (Test-Path "app\build.gradle.kts.backup") {
        Write-Host "Restoring original build.gradle.kts..." -ForegroundColor Yellow
        Move-Item "app\build.gradle.kts.backup" "app\build.gradle.kts" -Force
    }
}

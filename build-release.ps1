# PowerShell script to build a release signed APK for MQFTPServer
# Author: Generated by GitHub Copilot
# Date: September 9, 2025

param(
    [Parameter(Mandatory=$false)]
    [string]$KeystorePath = "",
    
    [Parameter(Mandatory=$false)]
    [string]$KeystorePassword = "",
    
    [Parameter(Mandatory=$false)]
    [string]$KeyAlias = "",
    
    [Parameter(Mandatory=$false)]
    [string]$KeyPassword = "",
    
    [Parameter(Mandatory=$false)]
    [switch]$Clean = $false,
    
    [Parameter(Mandatory=$false)]
    [switch]$Help = $false
)

function Show-Help {
    Write-Host @"
MQFTPServer Release APK Build Script
====================================

Usage: .\build-release.ps1 [options]

Options:
  -KeystorePath <path>     Path to your keystore file (.jks or .keystore)
  -KeystorePassword <pwd>  Password for the keystore
  -KeyAlias <alias>        Key alias in the keystore
  -KeyPassword <pwd>       Password for the key
  -Clean                   Clean build (removes build cache)
  -Help                    Show this help message

Examples:
  .\build-release.ps1 -KeystorePath "C:\keys\release.jks" -KeystorePassword "mypass" -KeyAlias "mykey" -KeyPassword "keypass"
  .\build-release.ps1 -Clean

Note: If signing parameters are not provided, the script will prompt for them.
      You can also set them via environment variables:
      - MQFTP_KEYSTORE_PATH
      - MQFTP_KEYSTORE_PASSWORD
      - MQFTP_KEY_ALIAS
      - MQFTP_KEY_PASSWORD
"@
}

function Test-Prerequisites {
    Write-Host "Checking prerequisites..." -ForegroundColor Yellow
    
    # Check if we're in the right directory
    if (-not (Test-Path "build.gradle.kts")) {
        Write-Error "build.gradle.kts not found. Please run this script from the project root directory."
        exit 1
    }
    
    # Check if gradlew exists
    if (-not (Test-Path "gradlew.bat")) {
        Write-Error "gradlew.bat not found. This script requires Gradle Wrapper."
        exit 1
    }
    
    # Check Java installation
    try {
        $javaVersion = java -version 2>&1 | Select-String "version" | Select-Object -First 1
        Write-Host "Java found: $javaVersion" -ForegroundColor Green
    }
    catch {
        Write-Error "Java not found in PATH. Please install Java JDK 17 or later."
        exit 1
    }
    
    Write-Host "Prerequisites check passed!" -ForegroundColor Green
}

function Get-SigningConfig {
    param(
        [ref]$keystorePath,
        [ref]$keystorePassword,
        [ref]$keyAlias,
        [ref]$keyPassword
    )
    
    # Try to get from parameters first
    if ($KeystorePath) { $keystorePath.Value = $KeystorePath }
    if ($KeystorePassword) { $keystorePassword.Value = $KeystorePassword }
    if ($KeyAlias) { $keyAlias.Value = $KeyAlias }
    if ($KeyPassword) { $keyPassword.Value = $KeyPassword }
    
    # Try to get from environment variables
    if (-not $keystorePath.Value) { $keystorePath.Value = $env:MQFTP_KEYSTORE_PATH }
    if (-not $keystorePassword.Value) { $keystorePassword.Value = $env:MQFTP_KEYSTORE_PASSWORD }
    if (-not $keyAlias.Value) { $keyAlias.Value = $env:MQFTP_KEY_ALIAS }
    if (-not $keyPassword.Value) { $keyPassword.Value = $env:MQFTP_KEY_PASSWORD }
    
    # Prompt for missing values
    if (-not $keystorePath.Value) {
        $keystorePath.Value = Read-Host "Enter keystore path (.jks or .keystore file)"
    }
    
    if (-not (Test-Path $keystorePath.Value)) {
        Write-Error "Keystore file not found: $($keystorePath.Value)"
        exit 1
    }
    
    if (-not $keystorePassword.Value) {
        $securePassword = Read-Host "Enter keystore password" -AsSecureString
        $keystorePassword.Value = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($securePassword))
    }
    
    if (-not $keyAlias.Value) {
        $keyAlias.Value = Read-Host "Enter key alias"
    }
    
    if (-not $keyPassword.Value) {
        $secureKeyPassword = Read-Host "Enter key password" -AsSecureString
        $keyPassword.Value = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($secureKeyPassword))
    }
}

function Update-GradleProperties {
    param(
        [string]$keystorePath,
        [string]$keystorePassword,
        [string]$keyAlias,
        [string]$keyPassword
    )
    
    Write-Host "Updating gradle.properties with signing configuration..." -ForegroundColor Yellow
    
    # Read existing gradle.properties
    $gradlePropsPath = "gradle.properties"
    $content = Get-Content $gradlePropsPath -Raw
    
    # Remove existing signing properties if they exist
    $content = $content -replace "(?m)^RELEASE_STORE_FILE=.*$", ""
    $content = $content -replace "(?m)^RELEASE_STORE_PASSWORD=.*$", ""
    $content = $content -replace "(?m)^RELEASE_KEY_ALIAS=.*$", ""
    $content = $content -replace "(?m)^RELEASE_KEY_PASSWORD=.*$", ""
    
    # Clean up multiple empty lines
    $content = $content -replace "(?m)^\s*$(\r?\n)", "`n"
    
    # Add signing properties
    $signingConfig = @"

# Release signing configuration
RELEASE_STORE_FILE=$keystorePath
RELEASE_STORE_PASSWORD=$keystorePassword
RELEASE_KEY_ALIAS=$keyAlias
RELEASE_KEY_PASSWORD=$keyPassword
"@
    
    $content += $signingConfig
    
    # Write back to file
    Set-Content -Path $gradlePropsPath -Value $content -NoNewline
    Write-Host "Signing configuration added to gradle.properties" -ForegroundColor Green
}

function Update-BuildGradle {
    Write-Host "Updating app/build.gradle.kts with signing configuration..." -ForegroundColor Yellow
    
    $buildGradlePath = "app\build.gradle.kts"
    $content = Get-Content $buildGradlePath -Raw
    
    # Check if signing config already exists
    if ($content -match "signingConfigs\s*\{") {
        Write-Host "Signing configuration already exists in build.gradle.kts" -ForegroundColor Green
        return
    }
    
    # Find the android block and add signing configuration
    $androidBlockPattern = '(?s)(android\s*\{.*?)(buildTypes\s*\{)'
    
    $signingConfigBlock = @'
  signingConfigs {
    create("release") {
      storeFile = file(project.findProperty("RELEASE_STORE_FILE") as String? ?: "")
      storePassword = project.findProperty("RELEASE_STORE_PASSWORD") as String?
      keyAlias = project.findProperty("RELEASE_KEY_ALIAS") as String?
      keyPassword = project.findProperty("RELEASE_KEY_PASSWORD") as String?
    }
  }

'@
    
    if ($content -match $androidBlockPattern) {
        $content = $content -replace $androidBlockPattern, "`$1$signingConfigBlock`$2"
        
        # Also update the release build type to use the signing config
        $releasePattern = '(?s)(release\s*\{.*?)(packaging\s*\{)'
        $signingConfigReference = "      signingConfig = signingConfigs.getByName(`"release`")`r`n      "
        
        if ($content -match $releasePattern) {
            $content = $content -replace $releasePattern, "`$1$signingConfigReference`$2"
        }
        
        Set-Content -Path $buildGradlePath -Value $content -NoNewline
        Write-Host "Signing configuration added to build.gradle.kts" -ForegroundColor Green
    }
    else {
        Write-Error "Could not find android block in build.gradle.kts"
        exit 1
    }
}

function Build-ReleaseAPK {
    param([bool]$cleanBuild)
    
    Write-Host "Starting APK build process..." -ForegroundColor Yellow
    
    if ($cleanBuild) {
        Write-Host "Performing clean build..." -ForegroundColor Yellow
        & .\gradlew.bat clean
        if ($LASTEXITCODE -ne 0) {
            Write-Error "Clean failed"
            exit 1
        }
    }
    
    Write-Host "Building release APK..." -ForegroundColor Yellow
    & .\gradlew.bat assembleRelease
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "Build successful!" -ForegroundColor Green
        
        # Find the generated APK
        $apkPath = Get-ChildItem -Path "app\build\outputs\apk\release" -Filter "*.apk" | Select-Object -First 1
        
        if ($apkPath) {
            $fullPath = $apkPath.FullName
            $size = [math]::Round($apkPath.Length / 1MB, 2)
            Write-Host @"

APK Generated Successfully!
===========================
Location: $fullPath
Size: $size MB

You can install this APK on your device or upload it to app stores.
"@ -ForegroundColor Green
        }
        else {
            Write-Warning "APK file not found in expected location"
        }
    }
    else {
        Write-Error "Build failed with exit code $LASTEXITCODE"
        exit 1
    }
}

function Cleanup-GradleProperties {
    Write-Host "Cleaning up gradle.properties..." -ForegroundColor Yellow
    
    $gradlePropsPath = "gradle.properties"
    $content = Get-Content $gradlePropsPath -Raw
    
    # Remove signing properties for security
    $content = $content -replace "(?m)^RELEASE_STORE_FILE=.*$", ""
    $content = $content -replace "(?m)^RELEASE_STORE_PASSWORD=.*$", ""
    $content = $content -replace "(?m)^RELEASE_KEY_ALIAS=.*$", ""
    $content = $content -replace "(?m)^RELEASE_KEY_PASSWORD=.*$", ""
    
    # Clean up empty lines
    $content = $content -replace "(?m)^\s*$(\r?\n)", "`n"
    $content = $content.TrimEnd()
    
    Set-Content -Path $gradlePropsPath -Value $content -NoNewline
    Write-Host "Signing configuration removed from gradle.properties" -ForegroundColor Green
}

# Main script execution
try {
    if ($Help) {
        Show-Help
        exit 0
    }
    
    Write-Host "MQFTPServer Release APK Builder" -ForegroundColor Cyan
    Write-Host "================================" -ForegroundColor Cyan
    
    Test-Prerequisites
    
    $keystorePath = ""
    $keystorePassword = ""
    $keyAlias = ""
    $keyPassword = ""
    
    Get-SigningConfig ([ref]$keystorePath) ([ref]$keystorePassword) ([ref]$keyAlias) ([ref]$keyPassword)
    
    Update-GradleProperties $keystorePath $keystorePassword $keyAlias $keyPassword
    Update-BuildGradle
    
    Build-ReleaseAPK $Clean
    
    Write-Host "`nBuild process completed successfully!" -ForegroundColor Green
}
catch {
    Write-Error "An error occurred: $($_.Exception.Message)"
    exit 1
}
finally {
    # Always cleanup sensitive information
    Cleanup-GradleProperties
}
